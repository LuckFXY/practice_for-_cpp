#include<iostream>
#include<string>

using namespace std;

class bitstack {
	unsigned** datas;
	int capacity;
	int top1;
	int top2;
	const int INT_LEN;
	unsigned types_num;
	void dilatation() {
		for (int i = 0; i < types_num; i++) {
			unsigned* data = datas[i];
			unsigned* newdata = new unsigned[capacity * 2];
			for (int i = 0; i < capacity; i++) {
				newdata[i] = data[i];
			}
			for (int i = capacity; i < (capacity << 1); i++)
				newdata[i] = 1;
			delete data;
			datas[i] = newdata;
		}
		capacity = capacity << 1;
	}
public:
	bitstack(unsigned types_number) :INT_LEN(sizeof(int) * 8 - 1) {
		capacity = 2;
		types_num = types_number;
		//datas =(unsigned**) malloc( sizeof(unsigned*) * types_num ) ;
		datas = new unsigned* [types_num];
		for (int i = 0; i < types_num; i++) {
			unsigned* data = new unsigned[capacity];
			for (int i = 0; i<capacity; i++)
				data[i] = 1;
			datas[i] = data;
		}
		
		top1 = 0;
		top2 = 0;
	}

	void push(short type) { //自然数
		top2++; //保留栈底，不存数据
		//translate type to one-hot code
		type = 1 << type;
		for (int i = 0; i < types_num; i++) {
			unsigned* data = datas[i];
			data[top1] = (data[top1] << 1) | ( ( type&(1<<i))>>i);
		}
			
		if (top2 == INT_LEN) {
			top2 = 0;
			top1++;
		}
		if (top1 == capacity) {
			dilatation();
		}
		//data[top1] = (data[top1] << 1) | bit;
	}
	bool pop(short& type) {
		if (top2 == 0 && top1 == 0) return false;
		short bit=0;
		for (int i = 0; i < types_num; i++) {
			unsigned* data = datas[i];
			bit = data[top1] & 1;
			if (bit) type = i;
			data[top1] = (data[top1] >> 1);
		}
		
		
		if (top2 != 0) {
			top2--;
			if (top2==0 && top1 != 0) {
				top1--;
				top2 = INT_LEN;
			}
		}

		return true;
	}
	/*
	string intTObit(unsigned num,bool padding) {
		int count = 0;
		const int INT_LEN = sizeof(int) * 8;
		char print[INT_LEN + 1] = { 0 };
		
		while (num) {
			print[INT_LEN - count - 1] = (num & 1) + '0';
			num = num >> 1;
			count += 1;
		}
		string ret;
		if(print + (INT_LEN - count))
			ret.assign((print + (INT_LEN - count)), count);
		if (padding)
			ret = string((top2-count), '_') + ret;
		return ret;
	}
	void shortdata() {
		for (int i = top1; i !=-1 ; i--)
			cout << intTObit(data[i],true);
		cout<< endl;
	}*/
	string intTObit(unsigned num, bool istop) {
		
		string ret(INT_LEN, '_');
		int count=0;
		int len = (istop) ? top2 : INT_LEN;
		for(int i=0;i<len;i++){
			ret[INT_LEN  - (len-i)] = (num & 1) + '0';
			num = num >> 1;
			count += 1;
		}

		return ret;
	}
	void shortdata() {

		for (int i = 0; i < types_num; i++) {
			unsigned* data = datas[i];
			if (top1 == -1) {
				cout << "_" << endl;
				return;
			}
			cout << intTObit(data[top1], true);
			for (int i = top1 - 1; i != -1; i--)
				cout << intTObit(data[i], false);
			cout <<'\n'<< endl;
		}
	}
};
bool Valid_parentheses(string s) {
	bitstack bs = bitstack(3);
	short type = -1;
	for (int i = 0; i < s.length(); i++) {
		char ch = s[i];
		
		switch (ch) {
		case '(':
			bs.push(0);
			break;
		case '[':
			bs.push(1);
			break;
		case '{':
			bs.push(2);
			break;

		case ')':
			if (bs.pop(type)) {
				if (type != 0)
					return false;
			}
			else return false;
			break;
		case ']':
			if (bs.pop(type)) {
				if (type != 1)
					return false;
			}
			else return false;
			break;
		case '}':
			if (bs.pop(type)) {
				if (type != 2)
					return false;
			}
			else return false;
			break;
		default:
			return false;
		}
	}
	if (bs.pop(type) != false)
		return false;
	return true;

}
int main() {/*
	bitstack bs = bitstack(3);
	for (int i = 0; i < 10; i++) {
		
		bs.push(i % 3);
		bs.shortdata();
	}
	short b;
	for (int i = 0; i < 12; i++) {
		
		if (bs.pop(b)) {
			cout << b << endl;
			bs.shortdata();
		}
		else
			cout << "None" << endl;
	}*/
	
	string t
	//t = "()[]{}";
	cout << Valid_parentheses(t) << endl;
	return 0;
}
